class Solution { //Binary Search, iterative
    public int search(int[] nums, int target) {
        int left_idx = 0;
        int right_idx = nums.length - 1;
        int found_idx = -1;
        if ((target < nums[left_idx]) || (target > nums[right_idx])) {
            return found_idx;
        }
        while (left_idx <= right_idx) {
        int mid_idx = left_idx + (right_idx - left_idx)/2;
            mid_idx = (int)Math.floor(mid_idx);
        if (target < nums[mid_idx]) {
            right_idx = mid_idx - 1;
        }
        if (target == nums[mid_idx]) {
            found_idx = mid_idx;
            break;
        }
        if (target > nums[mid_idx]) {
            left_idx = mid_idx + 1;
            }
        }
        return found_idx;
    }
}
==============
class Solution { //Binary Search, recursive
    public int search(int[] nums, int target) {
        int left_idx = 0;
        int right_idx = nums.length - 1;
        int found_idx = -1;
        if ((target < nums[left_idx]) || (target > nums[right_idx])) {
            return found_idx;
        }

        found_idx = Solution.searchRecursive(nums, target, left_idx, right_idx);
        return found_idx;
    }

    public static int searchRecursive(int[] nums, int target, int left_idx, int right_idx) {
            int mid_idx = left_idx + (right_idx - left_idx)/2;
                mid_idx = (int)Math.floor(mid_idx);
            int found_idx = -1;

            if (target < nums[mid_idx]) {
                right_idx = mid_idx - 1;
                found_idx = Solution.searchRecursive(nums, target, left_idx, right_idx);
            }
            if (target == nums[mid_idx]) {
                found_idx = mid_idx;
            }
            if (target > nums[mid_idx]) {
                left_idx = mid_idx + 1;
                found_idx = Solution.searchRecursive(nums, target, left_idx, right_idx);
            }
            return found_idx;
    }
}
============================
class Solution { //Two sum, naive approach
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i <= nums.length -1; i++) {
            int counter_part = target - nums[i];
            for (int j = i+1; j <= nums.length - 1; j++) {
                if (nums[j] == counter_part) {
                    return new int[] {i,j};
                }
            }
        }
        return new int[] {-1,-1};
    }
}

==========================================
//Used Javascript as hashmap data structure could easily be created and used in it.
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 * two sum double pass hashmap
 */
var twoSum = function(nums, target) {
    var hashMap = {}, counter_part, valid_idxs = [];
    for (var i = 0; i <= (nums.length -1); i++) {
        if (hashMap[nums[i]]) {
            hashMap[nums[i]] = hashMap[nums[i]].concat(i);
        } else {
            hashMap[nums[i]] = [i];
        }
    }

    for (var i = 0; i <= (nums.length -1); i++) {
        counter_part = target - nums[i];
        if (hashMap[counter_part]) {
            valid_idxs = hashMap[counter_part].filter(idx => idx != i);
            if (valid_idxs.length) {
            return [i, valid_idxs[0]];
            }
        }
    }
    return [-1,-1];
};
=================================================
//Used Javascript as hashmap data structure could easily be created and used in it.

/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 * two some single pass hashmap
 */
var twoSum = function(nums, target) {
    var hashMap = {}, counter_part, return_val = [-1, -1];
    for (var i = 0; i <= (nums.length -1); i++) {
        counter_part = target - nums[i];
        if (hashMap[counter_part]) {
            if (hashMap[counter_part].length) {
                return_val = [i, hashMap[counter_part][0]];
            }
        }
        if (hashMap[nums[i]]) {
            hashMap[nums[i]] = hashMap[nums[i]].concat(i);
        } else {
            hashMap[nums[i]] = [i];
        }
    }
    return return_val;
};
======================================================================
//Used Javascript
function simpleSearch(nums, target) {
    for (var idx=0; idx <= (nums.length - 1); idx++) {
        if (nums[idx] == target) {
            return idx;
        }
    }
    return -1;
}
